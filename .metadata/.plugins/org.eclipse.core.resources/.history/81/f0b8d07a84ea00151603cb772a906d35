/*
 * conn.cpp
 *
 *  Created on: Mar 15, 2016
 *      Author: pzw
 */

#include "conn.h"

#include <unistd.h>
#include <iostream>
#include <fcntl.h>

using namespace std;

enum w_proc_ret
{
	UDEF_ERROR = -1,
	SUCCESS,
	ILLGAL_FNAME,
	ILLGAL_SEG,
	ILLGAL_ACK,
	CANNOT_OPEN
};

conn::conn():conn_fd(-1),ev_in(NULL),ev_out(NULL),conn_base(NULL) {
    input = evbuffer_new();
    output = evbuffer_new();
}

conn::conn(event_base* base, int fd, event_callback_fn read_cb, event_callback_fn write_cb) {
    input = evbuffer_new();
    output = evbuffer_new();
    conn_fd = fd;
    conn_base = base;

    if (read_cb == NULL)
    	ev_in = NULL;
    else
    {
    	ev_in = event_new(base, fd, EV_READ|EV_PERSIST|EV_ET, read_cb, (void *)this);
    	event_add(ev_in, NULL);
    }

    if (write_cb == NULL)
    	ev_out = NULL;
    else
    {
    	ev_out = event_new(base, fd, EV_READ|EV_PERSIST|EV_ET, write_cb, (void *)this);
    	event_add(ev_out, NULL);
    }
}

conn::~conn() {
	// TODO Auto-generated destructor stub
	close(conn_fd);
	if (ev_in)
		event_del(ev_in);
	if (ev_out)
		event_del(ev_out);
	if (input)
		evbuffer_free(input);
	if (output)
		evbuffer_free(output);
}

void conn::disconn()
{
	close(conn_fd);
	if (ev_in)
		event_del(ev_in);
	if (ev_out)
		event_del(ev_out);
	if (input)
		evbuffer_free(input);
	if (output)
		evbuffer_free(output);
}

int conn::send(char* s)
{
	if (-1 == evbuffer_add_printf(output,"%s",s))
		cerr << "evbuffer printf error!" << endl;
	return evbuffer_write(output, conn_fd);
}

int conn::recv(string &real_buf)
{
	int iLen = 0;
	bool first_read=true;
	int recv_size = 0;
    char read_buf[3]; // one shot read
    while(1)
    {
		iLen = evbuffer_read(input, conn_fd, sizeof(read_buf)-1);
		if (iLen > 0)
		{
			first_read = false;
			recv_size += iLen;
			evbuffer_remove(input, read_buf, iLen);
			read_buf[iLen] = 0;
			real_buf += read_buf;
		}
		else if (!first_read && iLen == -1)
		{
			cout << "read end!" << endl;
			break;
		}
		else if (first_read && iLen == 0)
		{
			cout << "connection close!" << endl;
			disconn();
			break;
		}
		else  // iLen < 0
		{
			cerr << "error iLen = " << iLen << "; first_read = "<< first_read << endl;
			break;
		}
    }
    return iLen;
}

int conn::open_tar_file(string &fn)
{
	int rd_file_fd = open(fn.c_str(),O_RDONLY);
	if ( -1 == rd_file_fd){
		cerr << "open file_error" << endl;
		return CANNOT_OPEN;
	}
	target_file_fd = rd_file_fd;
	target_file_size = lseek(rd_file_fd, 0, SEEK_END);
	return SUCCESS;
}

