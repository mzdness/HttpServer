#include "tcp_server.h"
using namespace std;

tcp_server::tcp_server(char* port)
{
	if(( socket_fd = socket(PF_INET,SOCK_STREAM,IPPROTO_TCP)) < 0 )
	{
		cout<<"socket error"<< endl;
		exit(0);
	}
	memset(&host_addr,0,sizeof(host_addr));
	host_addr.sin_family = AF_INET;
	host_addr.sin_port = htons(atoi(port));
	host_addr.sin_addr.s_addr = htonl(INADDR_ANY);

	int n=1;
    if ( setsockopt(socket_fd, SOL_SOCKET, SO_REUSEADDR, &n, sizeof(n)) == -
1)
   {
      cout << "setsockopt" << endl;
      exit(1);
   }

	int ret;
	if ( (ret = bind(socket_fd, (sockaddr *)&host_addr,sizeof(host_addr))) < 0)
	{
		cout<<"bind failed: " << ret <<endl;
		exit(0);
	}
	if (listen(socket_fd,5) < 0)
	{
		cout << "listen error" << endl;
		exit(0);
	}
}

void tcp_server::rcv_message()
{
	socklen_t rcv_size;
	cout << "waiting connection" << endl;
	while (1)
	{
		if ((accept_fd = accept(socket_fd, (struct sockaddr*) &rmt_addr, &rcv_size))<0)
		{
			cout << "accept error" << endl;
			continue;
		}
		cout << "received connection from " << inet_ntoa(rmt_addr.sin_addr) << endl;
		if( !fork() )
		{
			char buffer[MAXSIZE];
			//string buffer;
			memset(buffer,0,MAXSIZE);
			if( ( read(accept_fd,buffer,MAXSIZE)) < 0 )
			{
				cout << "Read() error fix!" << endl;
				//break;
			}
			else {
				cout<<"Received message: "<< buffer << endl;
				//break;
			}
			//close(accept_fd);
			exit(0);
		}
		close(accept_fd);
	}
}
